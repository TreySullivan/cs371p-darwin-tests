==16057== Memcheck, a memory error detector
==16057== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==16057== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==16057== Command: TestAllocator
==16057== 
TestAllocator.c++
==16057== Conditional jump or move depends on uninitialised value(s)
==16057==    at 0x416BAC: Allocator<double, 100>::deallocate(double*, int) (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x40E910: TestAllocator<Allocator<double, 100> >::test_ten() (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x4176E3: CppUnit::TestCaller<TestAllocator<Allocator<double, 100> > >::runTest() (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x4E558E9: CppUnit::TestCaseMethodFunctor::operator()() const (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E48E33: CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E51E66: CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E5C593: CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::string const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55687: CppUnit::TestCase::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057== 
==16057== Conditional jump or move depends on uninitialised value(s)
==16057==    at 0x416BAC: Allocator<double, 100>::deallocate(double*, int) (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x415D58: TestAllocator<Allocator<double, 100> >::test_deallocate_3() (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x4176E3: CppUnit::TestCaller<TestAllocator<Allocator<double, 100> > >::runTest() (in /v/filer4b/v38q001/cjc3259/cs371p/Allocator/TestAllocator)
==16057==    by 0x4E558E9: CppUnit::TestCaseMethodFunctor::operator()() const (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E48E33: CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E51E66: CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E5C593: CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::string const&) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55687: CppUnit::TestCase::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55DC2: CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057==    by 0x4E55CE5: CppUnit::TestComposite::run(CppUnit::TestResult*) (in /usr/lib/libcppunit-1.12.so.1.0.0)
==16057== 
....................................


OK (36 tests)


Done.
==16057== 
==16057== HEAP SUMMARY:
==16057==     in use at exit: 122,880 bytes in 6 blocks
==16057==   total heap usage: 1,050 allocs, 1,044 frees, 260,985 bytes allocated
==16057== 
==16057== LEAK SUMMARY:
==16057==    definitely lost: 0 bytes in 0 blocks
==16057==    indirectly lost: 0 bytes in 0 blocks
==16057==      possibly lost: 0 bytes in 0 blocks
==16057==    still reachable: 122,880 bytes in 6 blocks
==16057==         suppressed: 0 bytes in 0 blocks
==16057== Rerun with --leak-check=full to see details of leaked memory
==16057== 
==16057== For counts of detected and suppressed errors, rerun with: -v
==16057== Use --track-origins=yes to see where uninitialised values come from
==16057== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4 from 4)
